name: ESLint PR Quality Check

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  eslint:
    name: ESLint Code Review
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      pull-requests: write
      checks: write
      statuses: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Get changed files
      id: changed-files
      if: github.event_name == 'pull_request'
      run: |
        # Get list of changed JavaScript files
        git diff --name-only origin/main...HEAD | grep '\.js$' > changed_js_files.txt || echo "No JS files changed"
        if [ -s changed_js_files.txt ]; then
          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          cat changed_js_files.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "has_js_changes=true" >> $GITHUB_OUTPUT
        else
          echo "has_js_changes=false" >> $GITHUB_OUTPUT
        fi

    - name: Run ESLint on changed files (PR)
      if: github.event_name == 'pull_request' && steps.changed-files.outputs.has_js_changes == 'true'
      run: |
        echo "Running ESLint on changed JavaScript files:"
        cat changed_js_files.txt
        
        # Run ESLint on changed files only
        npx eslint $(cat changed_js_files.txt | tr '\n' ' ') --format json > eslint-results.json || true
        
        # Display results in a readable format
        npx eslint $(cat changed_js_files.txt | tr '\n' ' ') || true
        
        # Parse results and set outputs
        node -e "
          const fs = require('fs');
          const results = JSON.parse(fs.readFileSync('eslint-results.json', 'utf8'));
          
          let errorCount = 0;
          let warningCount = 0;
          let annotations = [];
          
          results.forEach(result => {
            if (result.messages.length > 0) {
              result.messages.forEach(msg => {
                if (msg.severity === 2) errorCount++;
                if (msg.severity === 1) warningCount++;
                
                annotations.push({
                  path: result.filePath.replace(process.cwd() + '/', ''),
                  start_line: msg.line,
                  end_line: msg.line,
                  start_column: msg.column,
                  end_column: msg.column,
                  annotation_level: msg.severity === 2 ? 'failure' : 'warning',
                  message: \`\${msg.ruleId ? '[' + msg.ruleId + '] ' : ''}\${msg.message}\`
                });
              });
            }
          });
          
          console.log('Error count:', errorCount);
          console.log('Warning count:', warningCount);
          
          // Write summary for GitHub
          const summary = \`## ESLint Results
          
📊 **Summary:**
- 🔴 Errors: \${errorCount}
- 🟡 Warnings: \${warningCount}
- 📁 Files checked: \${results.length}

\${errorCount > 0 ? '❌ **Pull request cannot be merged due to ESLint errors.**' : '✅ **No ESLint errors found.**'}

\${warningCount > 0 ? '⚠️ Please review the warnings above.' : ''}
\`;
          
          fs.writeFileSync('eslint-summary.md', summary);
          fs.writeFileSync('error-count.txt', errorCount.toString());
          fs.writeFileSync('warning-count.txt', warningCount.toString());
        "

    - name: Run ESLint on all files (Manual)
      if: github.event_name == 'workflow_dispatch'
      run: |
        echo "Running ESLint on all JavaScript files:"
        npx eslint '**/*.js' --format json > eslint-results.json || true
        npx eslint '**/*.js' || true
        
        # Parse results
        node -e "
          const fs = require('fs');
          const results = JSON.parse(fs.readFileSync('eslint-results.json', 'utf8'));
          
          let errorCount = 0;
          let warningCount = 0;
          
          results.forEach(result => {
            result.messages.forEach(msg => {
              if (msg.severity === 2) errorCount++;
              if (msg.severity === 1) warningCount++;
            });
          });
          
          console.log('Error count:', errorCount);
          console.log('Warning count:', warningCount);
          
          fs.writeFileSync('error-count.txt', errorCount.toString());
          fs.writeFileSync('warning-count.txt', warningCount.toString());
        "

    - name: Comment on PR with results
      if: github.event_name == 'pull_request' && steps.changed-files.outputs.has_js_changes == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Read the summary
          let summary = '';
          if (fs.existsSync('eslint-summary.md')) {
            summary = fs.readFileSync('eslint-summary.md', 'utf8');
          }
          
          // Find existing comment
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const existingComment = comments.data.find(comment => 
            comment.body.includes('## ESLint Results')
          );
          
          const commentBody = `${summary}
          
<details>
<summary>View detailed ESLint output</summary>

\`\`\`
${fs.existsSync('eslint-results.json') ? 
  JSON.stringify(JSON.parse(fs.readFileSync('eslint-results.json', 'utf8')), null, 2) 
  : 'No ESLint results available'}
\`\`\`

</details>

---
*This comment will be updated when new commits are pushed.*`;

          if (existingComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: commentBody
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
          }

    - name: Check for errors and fail if found
      run: |
        if [ -f error-count.txt ]; then
          error_count=$(cat error-count.txt)
          warning_count=$(cat warning-count.txt 2>/dev/null || echo "0")
          
          echo "ESLint found $error_count error(s) and $warning_count warning(s)"
          
          if [ "$error_count" -gt 0 ]; then
            echo "❌ ESLint found $error_count error(s). Pull request check failed."
            exit 1
          else
            echo "✅ No ESLint errors found. Pull request check passed."
            exit 0
          fi
        else
          echo "✅ No JavaScript files to check."
          exit 0
        fi

    - name: Set status check
      if: always() && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let state = 'success';
          let description = 'ESLint check passed';
          
          if (fs.existsSync('error-count.txt')) {
            const errorCount = parseInt(fs.readFileSync('error-count.txt', 'utf8'));
            const warningCount = parseInt(fs.readFileSync('warning-count.txt', 'utf8') || '0');
            
            if (errorCount > 0) {
              state = 'failure';
              description = `ESLint found ${errorCount} error(s)`;
            } else if (warningCount > 0) {
              state = 'success';
              description = `ESLint passed with ${warningCount} warning(s)`;
            }
          }
          
          await github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.sha,
            state: state,
            target_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
            description: description,
            context: 'ESLint PR Check'
          });